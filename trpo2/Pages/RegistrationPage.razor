@page "/RegistrationPage"
@inject TourAgencyContext dbContext
@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<div class="login-form">
    <h1 class="Vhonh">Регистрация</h1>

    <div class="form-group">
        <label for="firstName">Имя:</label>
        <input type="text" maxlength="15" id="firstName" class="form-control" @bind="_firstName" required />
    </div>

    <div class="form-group">
        <label for="lastName">Фамилия:</label>
        <input type="text" maxlength="20" id="lastName" class="form-control" @bind="_lastName" required />
    </div>

    <div class="form-group">
        <label for="email">Почта:</label>
        <input type="email" maxlength="30" id="email" class="form-control" @bind="_email" required />
    </div>

    <div class="form-group">
        <label for="phoneNumber">Номер телефона:</label>
        <input type="tel" maxlength="11" id="phoneNumber" class="form-control" oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0, 12)" @bind="_phoneNumber" required />
    </div>

    <div class="form-group">
        <label for="password">Пароль:</label>
        <input type="password" maxlength="8" id="password" class="form-control" @bind="_password" required />
    </div>

    <button class="btn btn-reg" @onclick="Register">Зарегистироваться</button>
</div>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    private string _firstName = null!;

    private string _lastName = null!;

    private string _email = null!;

    private string _phoneNumber = null!;

    private string _password = null!;

    private async Task Register()
    {
        if (!_email.Contains("@"))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Некорректный адрес электронной почты.");
            return;
        }

        var existingUser = dbContext.Customers.FirstOrDefault(c => c.Email == _email);
        if (existingUser != null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "По этой почте пользователь уже был зарегистрирован!");
            return;
        }

        if (string.IsNullOrEmpty(_firstName) ||
            string.IsNullOrEmpty(_lastName) ||
            string.IsNullOrEmpty(_email) ||
            string.IsNullOrEmpty(_phoneNumber) ||
            string.IsNullOrEmpty(_password))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Пожалуйста, заполните все обязательные поля.");
            return;
        }

        var customer = new Customer()
            {
                FirstName = _firstName,
                LastName = _lastName,
                Email = _email,
                Phone = _phoneNumber,
                Password = _password
            };

        dbContext.Customers.Add(customer);
        await dbContext.SaveChangesAsync();

        NavigationManager.NavigateTo("/");
    }
}